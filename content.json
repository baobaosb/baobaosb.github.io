{"meta":{"title":"BaoBao","subtitle":"努力变强变秃","description":"努力变强变秃","author":"BaoBao","url":"http://baobaosb.github.io","root":"/"},"pages":[{"title":"","date":"2019-05-31T06:23:49.193Z","updated":"2019-05-31T06:23:49.193Z","comments":false,"path":"tags/index.html","permalink":"http://baobaosb.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-05-31T06:24:14.553Z","updated":"2019-05-31T06:24:14.553Z","comments":false,"path":"categories/index.html","permalink":"http://baobaosb.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"SSM框架整合环境搭建","slug":"SSM-hj","date":"2019-10-02T16:38:03.441Z","updated":"2019-11-16T10:13:31.944Z","comments":false,"path":"2019/10/03/SSM-hj/","link":"","permalink":"http://baobaosb.github.io/2019/10/03/SSM-hj/","excerpt":"","text":"SSM（Spring+SpringMVC+MyBatis）框架集由Spring、MyBatis两个开源框架整合而成（SpringMVC是Spring中的部分内容）。常作为数据源较简单的web项目的框架。 环境搭建1.新建工程，导入jar包： jdk1.8版本Spring jar包用4.0以上的版本 jar包 2.src下创建一个config文件，在config下创建springmvc.xml：12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd\"&gt; &lt;!-- 1.配置注解扫描位置 --&gt; &lt;context:component-scan base-package=\"cn.gdyvc.controller\" /&gt; &lt;!-- 2.配置注解处理映射--&gt; &lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/&gt; &lt;!--3.配置适配器--&gt; &lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"&gt; &lt;/bean&gt; &lt;!-- 4.配置springmvc视图解析器 视图解析器解析的视频路径为：前缀 + 后缀 --&gt; &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/views\" /&gt; &lt;property name=\"suffix\" value=\".jsp\" /&gt; &lt;/bean&gt;&lt;/beans&gt; 3.在web.xml添加springmvc配置:12345678910111213141516&lt;servlet&gt; &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 3.0的springmvc 默认加载WEB-INF下的dispatcher-servlet.xml文件 3.2的springmvc 加载DispatcherServlet-servlet.xml文件 --&gt; &lt;init-param&gt; &lt;!-- 修改黑底springmvc加载的配置文件路径 --&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 4.在config下创建mybatis.xml：123456789101112&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;configuration&gt; &lt;!-- 别名配置 --&gt; &lt;typeAliases&gt; &lt;!-- 批量配置别名：指定批量定义别名的类包，别名为类名（首字母大小写都可） --&gt; &lt;package name=\"cn.gdyvc.domain\"/&gt; &lt;/typeAliases&gt; &lt;mappers&gt; &lt;!-- 批量加载映射文件 --&gt; &lt;package name=\"cn.gdyvc.mapper\"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 5.创建spring的applicaiontContext.xml：1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd\"&gt; &lt;!-- 1.加载db配置文件 --&gt; &lt;context:property-placeholder location=\"classpath:db.properties\"/&gt; &lt;!-- 2.配置c3p0数据源 --&gt; &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;property name=\"driverClass\" value=\"$&#123;jdbc.driver&#125;\"/&gt; &lt;property name=\"jdbcUrl\" value=\"$&#123;jdbc.url&#125;\"/&gt; &lt;property name=\"user\" value=\"$&#123;jdbc.username&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\"/&gt; &lt;property name=\"maxPoolSize\" value=\"30\"/&gt; &lt;property name=\"minPoolSize\" value=\"2\"/&gt; &lt;/bean&gt; &lt;!-- 3.让spring管理sqlsessionFactory --&gt; &lt;bean class=\"org.mybatis.spring.SqlSessionFactoryBean\" id=\"sqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;!-- 指定配置文件位置 --&gt; &lt;property name=\"configLocation\" value=\"classpath:SqlMapConfig.xml\"/&gt; &lt;/bean&gt; &lt;!-- 4.配置mapper扫描器.批量扫描创建代理对象 --&gt; &lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;property name=\"basePackage\" value=\"cn.gdyvc.mapper\"/&gt; &lt;property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactoryBean\"/&gt; &lt;/bean&gt;&lt;/beans&gt; 6.db.properties文件内容： 账号密码根据你自己的数据库进行修改。1234jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/mybatisjdbc.username=rootjdbc.password=123456 7.applicaiontContext.xml的spring事务配置：12345678910111213141516171819202122232425262728293031323334353637Spring中Propagation类的事务属性详解： REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。 NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务&lt;!-- 6.事务管理器 --&gt;&lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;&lt;/bean&gt;&lt;!-- 6.通知 --&gt; &lt;tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"&gt; &lt;tx:attributes&gt; &lt;!-- 传播行为 --&gt; &lt;tx:method name=\"save*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"insert*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"delete*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"update*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"find*\" propagation=\"SUPPORTS\" read-only=\"true\"/&gt; &lt;tx:method name=\"get*\" propagation=\"SUPPORTS\" read-only=\"true\"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- 7. 切面 --&gt; &lt;aop:config&gt; &lt;aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* cn.gdyvc.service.*.*(..))\"/&gt; &lt;/aop:config&gt;&lt;!-- 5.配置事务管理器 --&gt;&lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;&lt;/bean&gt;&lt;!-- 6.开启事务注解--&gt;&lt;tx:annotation-driven&gt;&lt;/tx:annotation-driven&gt; 8.Web.xml配置spring容器：12345678&lt;!-- spring的配置 --&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt;","categories":[{"name":"SSM","slug":"SSM","permalink":"http://baobaosb.github.io/categories/SSM/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"http://baobaosb.github.io/tags/SSM/"},{"name":"环境搭建","slug":"环境搭建","permalink":"http://baobaosb.github.io/tags/环境搭建/"},{"name":"框架","slug":"框架","permalink":"http://baobaosb.github.io/tags/框架/"}]},{"title":"Docker安装与使用","slug":"docker","date":"2019-09-21T01:21:36.938Z","updated":"2019-10-02T12:26:51.613Z","comments":false,"path":"2019/09/21/docker/","link":"","permalink":"http://baobaosb.github.io/2019/09/21/docker/","excerpt":"","text":"Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 Docker安装1.使用储存库安装： 安装所需的包。yum-utils提供了yum-config-manager 效用，并device-mapper-persistent-data和lvm2由需要 devicemapper存储驱动程序。 123$ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 使用以下命令设置稳定存储库。 123$ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo 2.安装最新版本的Docker Engine - 社区和容器：$ sudo yum install docker-ce docker-ce-cli containerd.io3.启动Docker容器$ sudo systemctl start dockerDocker Tomcat安装1.安装Tomcat服务器： 安装一个名为mycat，端口8080改为13080的Tomcat服务器。$ docker run -d --name mycat -p 13080:8080 tomcat:8.0 2.启动Tomcat：$ docker start mycat3.打开 http://kansuv.info:13080 来访问Tomcat (kansuv.info改为你的服务器域名或者IP)： tomcat","categories":[{"name":"Docker","slug":"Docker","permalink":"http://baobaosb.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://baobaosb.github.io/tags/Docker/"},{"name":"容器","slug":"容器","permalink":"http://baobaosb.github.io/tags/容器/"},{"name":"linux","slug":"linux","permalink":"http://baobaosb.github.io/tags/linux/"}]},{"title":"Hexo博客框架的搭建与使用","slug":"hexo","date":"2019-09-20T08:48:07.784Z","updated":"2019-09-20T09:24:50.326Z","comments":false,"path":"2019/09/20/hexo/","link":"","permalink":"http://baobaosb.github.io/2019/09/20/hexo/","excerpt":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页","text":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 博客搭建1.环境准备：安装node.js和git2.安装hexo框架：$ npm i hexo-cli -g3.项目初始化：$ hexo init4.本地端口浏览：（hexo s）$ hexo server5.生成静态文件：（hexo g）$ hexo generate6.安装部署插件：$ npm i hexo-deployer-git -s7.配置根目录_config.jml文件：123deploy: type: gitrepo: 仓库地址 8.网站语言设置为中文： language: zh-CN 9.推送部署：（hexo d）$ hexo deploy10.开启仓库page服务注：如果没有样式，需修改_config.yml文件找到 url 和 root 进行配置 12url: http://博客地址 root: /博客项目名 主题更换1.下载主题项目文件夹，将主题文件夹放到 blog/themes 目录下2.配置根目录_config.jml文件： 12#Extensionstheme: 主题名称 //即主题项目文件夹的名称 3.重新生成资源文件并推送：$ hexo g -d 博文发布hexo n 文件名：新建文章hexo clean：清空资源文件hexo g：重新生成资源文件hexo d：发布文章到仓库.io(最后两步可简写为：hexo g -d)","categories":[{"name":"hexo博客框架","slug":"hexo博客框架","permalink":"http://baobaosb.github.io/categories/hexo博客框架/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://baobaosb.github.io/tags/博客搭建/"},{"name":"hexo","slug":"hexo","permalink":"http://baobaosb.github.io/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-06-03T10:02:53.865Z","updated":"2019-09-20T09:15:36.507Z","comments":true,"path":"2019/06/03/hello-world/","link":"","permalink":"http://baobaosb.github.io/2019/06/03/hello-world/","excerpt":"","text":"亲爱的朋友,欢迎来到我的博客,这是我的第一个博客网站……作为技术渣,目前个人技术不成熟,对于博客方面不是很了解,还有很多地方没配置好,后面会慢慢的修改,也欢迎大家指出问题,谢谢！！！","categories":[{"name":"Hello World","slug":"Hello-World","permalink":"http://baobaosb.github.io/categories/Hello-World/"}],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"http://baobaosb.github.io/tags/Hello-World/"}]}]}